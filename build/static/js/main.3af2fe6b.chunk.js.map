{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPerson","post","personId","delete","personData","put","NotificationMessage","message","type","clsName","className","FilterForm","filter","handleFilterChange","value","onChange","NewPersonForm","newName","newNumber","handleNameChange","handleNumberChange","handleNameSubmission","onSubmit","Persons","persons","handlePersonDeletion","map","person","name","toLowerCase","includes","key","Person","number","onClick","App","useState","setPersons","setNewName","setNewNumber","setFilter","notificationMessage","setNotificationMessage","useEffect","personsService","responseData","fetchAllPersons","allPersons","clearForm","clearNotificationMessage","setTimeout","e","preventDefault","target","confirmationMessage","personPresentInCurrentData","find","p","window","confirm","id","catch","err","Error","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3af2fe6b.chunk.js","sourcesContent":["import axios from 'axios';\nconst baseUrl = '/api/persons';\n\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n}\n\nconst create = (newPerson) => {\n  const request = axios.post(baseUrl, newPerson);\n  return request.then((response) => response.data);\n}\n\nconst update = (personId, personData) => {\n  const request = axios.put(`${baseUrl}/${personId}`, personData);\n  return request.then((response) => response.data);\n}\n\nconst remove = (personId) => {\n  const request = axios.delete(`${baseUrl}/${personId}`);\n  return request.then((response) => response.data);\n}\n\nexport default { getAll, create, remove, update };","import React, { useState, useEffect } from 'react'\nimport personsService from './services/persons'\n\nconst NotificationMessage = ({ message, type }) => {\n  let clsName = '';\n\n  if (type === 'success') clsName = 'success-message';\n\n  if (type === 'error') clsName = 'error-message';\n\n  if (!type || !message) return null;\n\n  return (\n    <div className={clsName}>\n      {message}\n    </div>\n  )\n}\n\nconst FilterForm = ({ filter, handleFilterChange }) => (\n  <>\n    <form>\n      <div>\n        filter shown with <input value={filter} onChange={handleFilterChange} />\n      </div>\n    </form>\n  </>\n);\n\nconst NewPersonForm = (\n  { newName, newNumber, handleNameChange, handleNumberChange, handleNameSubmission }\n) => (\n    <>\n      <form onSubmit={handleNameSubmission}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange} />\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </>\n  );\n\nconst Persons = ({ persons, filter, handlePersonDeletion }) => (\n  <>\n    {persons.map((person) => {\n      if (person.name.toLowerCase().includes(filter.toLowerCase())) {\n        return (\n          <Person\n            key={person.name}\n            person={person}\n            handlePersonDeletion={handlePersonDeletion}\n          />\n        );\n      }\n\n      return null;\n    })}\n  </>\n);\n\nconst Person = ({ person, handlePersonDeletion }) => {\n  return (\n    <p>\n      <span>{person.name} {person.number}</span>\n      <button onClick={() => handlePersonDeletion(person)}>delete</button>\n    </p>\n  );\n};\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filter, setFilter] = useState('');\n  const [notificationMessage, setNotificationMessage] = useState({ message: '', type: '' })\n\n  useEffect(() => {\n    personsService.getAll().then((responseData) => {\n      setPersons(responseData);\n    });\n  }, []);\n\n  const handleNameChange = (e) => {\n    e.preventDefault();\n    setNewName(e.target.value);\n  }\n\n  const handleNumberChange = (e) => {\n    e.preventDefault();\n    setNewNumber(e.target.value);\n  }\n\n  const handleFilterChange = (e) => {\n    e.preventDefault();\n    setFilter(e.target.value);\n  }\n\n  const fetchAllPersons = () => {\n    personsService.getAll().then((allPersons) => {\n      setPersons(allPersons);\n    });\n  }\n\n  const clearForm = () => {\n    setNewName('');\n    setNewNumber('');\n  }\n\n  const handlePersonSubmission = (e) => {\n    e.preventDefault();\n\n    const confirmationMessage = `${newName} is already added to phonebook, replace the old number with new one?`;\n\n    const personPresentInCurrentData = persons.find(p => p.name === newName);\n\n    const person = { name: newName, number: newNumber };\n\n    if (personPresentInCurrentData) {\n      if (window.confirm(confirmationMessage)) {\n        personsService.update(personPresentInCurrentData.id, person)\n          .then(() => {\n            setNotificationMessage({ message: `Added ${newName}`, type: 'success' });\n            clearNotificationMessage();\n            fetchAllPersons();\n          })\n          .catch((err) => {\n            setNotificationMessage({\n              message: `Information of ${newName} has already been removed from server`,\n              type: 'error'\n            });\n          })\n\n        clearForm();\n      }\n    } else {\n      personsService.create(person)\n        .then(() => {\n          setNotificationMessage({ message: `Updated ${newName}`, type: 'success' });\n          clearNotificationMessage();\n          fetchAllPersons();\n        })\n        .catch((err) => {\n          setNotificationMessage({ message: err, type: 'error' });\n          clearNotificationMessage();\n        })\n\n      clearForm();\n    }\n  }\n\n  const handlePersonDeletion = (person) => {\n    if (!person) {\n      throw new Error('person is not valid');\n    }\n    if (window.confirm(`Delete ${person.name}?`)) {\n      personsService.remove(person.id)\n        .then(() => {\n          personsService.getAll().then((responseData) => { setPersons(responseData); })\n        })\n    }\n  }\n\n  const clearNotificationMessage = () => {\n    setTimeout(() => { setNotificationMessage({ message: '', type: '' }); }, 5000);\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <NotificationMessage message={notificationMessage.message} type={notificationMessage.type} />\n\n      <FilterForm filter={filter} handleFilterChange={handleFilterChange} />\n\n      <h2>Add a new</h2>\n\n      <NewPersonForm\n        newName={newName}\n        newNumber={newNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        handleNameSubmission={handlePersonSubmission}\n      />\n\n      <h2>Numbers</h2>\n\n      <Persons\n        persons={persons}\n        filter={filter}\n        handlePersonDeletion={handlePersonDeletion}\n      />\n\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}